import { Telegraf } from "telegraf";
import dotenv from "dotenv";
import { exec } from "node:child_process";
import { randomUUID } from "node:crypto";
import fs from "node:fs";
import { supabase } from "./supabase.js";
import { ytDlpCommands } from "./utils.js";

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN as string);

bot.start(async (ctx) => {
  const user = ctx.from;

  const { error } = await supabase.from("users").upsert([
    {
      telegram_id: user.id,
      username: user.username,
      first_name: user.first_name,
      language_code: user.language_code,
      is_premium: user.is_premium ?? false,
    },
  ]);

  if (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }

  ctx.reply(
    `–ü—Ä–∏–≤—ñ—Ç, ${user.first_name}! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —ñ —è —Å–ø—Ä–æ–±—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ.`
  );
});

bot.help((ctx) =>
  ctx.reply(
    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –∑ TikTok, Twitter –∞–±–æ YouTube Shorts."
  )
);

bot.on("text", async (ctx) => {
  const user = ctx.from;
  const url = ctx.message.text;

  if (!url.startsWith("http")) {
    return ctx.reply("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ.");
  }

  ctx.reply("üîç –û—Ç—Ä–∏–º—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ...");

  const isTikTok = url.includes("tiktok.com") || url.includes("vm.tiktok.com");

  console.log(isTikTok);

  if (isTikTok) {
    exec(ytDlpCommands.listFormats(url), async (error, stdout, stderr) => {
      if (error || stderr) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤:", error || stderr);
        return ctx.reply(
          "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç–∏ –≤—ñ–¥–µ–æ."
        );
      }

      try {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ h264 –±–µ–∑ watermarked
        const formats = stdout
          .split("\n")
          .filter(
            (line) => line.includes("h264") && !line.includes("watermarked")
          );

        if (formats.length === 0) {
          return ctx.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–µ–æ.");
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –±–∏—Ç—Ä–µ–π—Ç–æ–º (TBR)
        const bestFormat = formats.reduce(
          (max, line) => {
            const match = line.match(/(\d+)k/); // –ò—â–µ–º –±–∏—Ç—Ä–µ–π—Ç –≤ —Å—Ç—Ä–æ–∫–µ
            const bitrate = match ? parseInt(match[1], 10) : 0;
            return bitrate > max.bitrate ? { line, bitrate } : max;
          },
          { line: "", bitrate: 0 }
        );

        if (!bestFormat.line) {
          return ctx.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç.");
        }

        const formatId = bestFormat.line.split(" ")[0]; // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ä–º–∞—Ç–∞
        console.log(`üìú –í–∏–±—Ä–∞–Ω–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ñ–æ—Ä–º–∞—Ç: ${formatId}`);

        // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
        exec(ytDlpCommands.analyzeVideo(url), async (error, stdout, stderr) => {
          if (error || stderr) {
            console.error(
              "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:",
              error || stderr
            );
            return ctx.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ.");
          }

          try {
            const metadata = JSON.parse(stdout);
            const fileSize = metadata.filesize ?? metadata.filesize_approx ?? 0;
            const maxSize = 50 * 1024 * 1024; // 50MB
            const fileSizeInMb = Math.round(fileSize / 1024 / 1024);

            if (fileSize === 0) {
              return ctx.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ.");
            }

            if (fileSize > maxSize) {
              return ctx.reply(
                `‚ùå –í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ (${fileSizeInMb} MB). –õ—ñ–º—ñ—Ç: 50 MB.`
              );
            }

            console.log(`‚úÖ –†–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ: ${fileSizeInMb} MB. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é...`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data, error } = await supabase
              .from("users")
              .select("downloads, total_downloads_size")
              .eq("telegram_id", user.id)
              .single();

            if (error || !data) {
              console.error(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                error
              );
            } else {
              const newDownloads = (data.downloads ?? 0) + 1;
              const newTotalSize =
                (data.total_downloads_size ?? 0) + fileSizeInMb;

              const { error: updateError } = await supabase
                .from("users")
                .update({
                  downloads: newDownloads,
                  total_downloads_size: newTotalSize,
                })
                .eq("telegram_id", user.id);

              if (updateError) {
                console.error(
                  "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                  updateError
                );
              } else {
                console.log(
                  `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å–∫–∞—á–∏–≤–∞–Ω–∏–π - ${newDownloads}, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä - ${newTotalSize} MB`
                );
              }
            }

            // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            const fileName = `video_${randomUUID()}.mp4`;
            const command = ytDlpCommands.tikTok(fileName, url, formatId);

            exec(command, async (error, stdout, stderr) => {
              console.log(stdout);
              if (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                return ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ.");
              }
              if (stderr) console.error(`‚ö†Ô∏è STDERR: ${stderr}`);

              if (fs.existsSync(fileName)) {
                await ctx.replyWithVideo({ source: fileName });

                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                fs.unlink(fileName, (err) => {
                  if (err)
                    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${err.message}`);
                });
              } else {
                ctx.reply(
                  "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è."
                );
              }
            });
          } catch (parseError) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", parseError);
            ctx.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–µ–æ.");
          }
        });
      } catch (parseError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:", parseError);
        ctx.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ–æ—Ä–º–∞—Ç—É.");
      }
    });
  } else {
    exec(ytDlpCommands.analyzeVideo(url), async (error, stdout, stderr) => {
      if (error || stderr) {
        console.error(
          "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:",
          error || stderr
        );
        return ctx.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ.");
      }

      try {
        const metadata = JSON.parse(stdout);
        const maxSize = 50 * 1024 * 1024; // 50MB

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞
        let fileSize = metadata.filesize ?? metadata.filesize_approx;
        let fileSizeInMb = fileSize ? Math.round(fileSize / 1024 / 1024) : null;

        if (!fileSizeInMb) {
          console.warn(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏..."
          );
        } else if (fileSize > maxSize) {
          return ctx.reply(
            `‚ùå –í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ (${fileSizeInMb} MB). –õ—ñ–º—ñ—Ç: 50 MB.`
          );
        }

        console.log(
          `‚úÖ –†–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ: ${
            fileSizeInMb ? fileSizeInMb + " MB" : "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
          }. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é...`
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–∑–≤–µ—Å—Ç–µ–Ω)
        if (fileSizeInMb) {
          const { data, error } = await supabase
            .from("users")
            .select("downloads, total_downloads_size")
            .eq("telegram_id", user.id)
            .single();

          if (error || !data) {
            console.error(
              "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
              error
            );
          } else {
            const newDownloads = (data.downloads ?? 0) + 1;
            const newTotalSize =
              (data.total_downloads_size ?? 0) + fileSizeInMb;

            const { error: updateError } = await supabase
              .from("users")
              .update({
                downloads: newDownloads,
                total_downloads_size: newTotalSize,
              })
              .eq("telegram_id", user.id);

            if (updateError) {
              console.error(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                updateError
              );
            } else {
              console.log(
                `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å–∫–∞—á–∏–≤–∞–Ω–∏–π - ${newDownloads}, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä - ${newTotalSize} MB`
              );
            }
          }
        }

        // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        const fileName = `video_${randomUUID()}.mp4`;
        const command = ytDlpCommands.default(fileName, url);

        exec(command, async (error, stdout, stderr) => {
          console.log(stdout);
          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            return ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ.");
          }
          if (stderr) console.error(`‚ö†Ô∏è STDERR: ${stderr}`);

          if (fs.existsSync(fileName)) {
            await ctx.replyWithVideo({ source: fileName });

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            fs.unlink(fileName, (err) => {
              if (err)
                console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${err.message}`);
            });
          } else {
            ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.");
          }
        });
      } catch (parseError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", parseError);
        ctx.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–µ–æ.");
      }
    });
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
